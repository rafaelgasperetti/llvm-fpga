/* Copyright (c) 2009 Ricardo Menotti, All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its 
 * documentation for NON-COMERCIAL purposes and without fee is hereby granted 
 * provided that this copyright notice appears in all copies.
 *
 * RICARDO MENOTTI MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY
 * OF THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR 
 * NON-INFRINGEMENT. RICARDO MENOTTI SHALL NOT BE LIABLE FOR ANY DAMAGES 
 * SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING THIS 
 * SOFTWARE OR ITS DERIVATIVES. 
 */

const C0 = 0xB505;
const C1 = 0x2C62;
const C2 = 0x29CF;
const C3 = 0x25A0;
const C5 = 0x1924;
const C6 = 0x1151;
const C7 = 0x08D4;

const N = 8;
const M = 64; //N*N
const num_fdcts = 10;
const SIZE = 640; //  < 640=num_fdcts*M;
	
typedef fixed(32,1) int;
typedef fixed(10,0) address;
typedef fixed(1,0) bool;

fdct(in bool init, out bool done, out int output) {
  
	{
		int dct_io_ptr[SIZE] = {
			-232,	-231,	-236,	-229,	-228,	-242,	-226,	-225,	
			-248,	-223,	-222,	-254,	-220,	-219,	-260,	-217,	
			-216,	-266,	-214,	-213,	-272,	-211,	-210,	-278,	
			-208,	-207,	-284,	-205,	-204,	-290,	-202,	-201,	
			-296,	-199,	-198,	-302,	-196,	-195,	-308,	-193,	
			-192,	-314,	-190,	-189,	-320,	-187,	-186,	-326,	
			-184,	-183,	-332,	-181,	-180,	-338,	-178,	-177,	
			-344,	-175,	-174,	-350,	-172,	-171,	-356,	-169,	
			
			-168,	-362,	-166,	-165,	-368,	-163,	-162,	-374,	
			-160,	-159,	-380,	-157,	-156,	-386,	-154,	-153,	
			-392,	-151,	-150,	-398,	-148,	-147,	-404,	-145,	
			-144,	-410,	-142,	-141,	-416,	-139,	-138,	-422,	
			-136,	-135,	-428,	-133,	-132,	-434,	-130,	-129,	
			-440,	-127,	-126,	-446,	-124,	-123,	-452,	-121,	
			-120,	-458,	-118,	-117,	-464,	-115,	-114,	-470,	
			-112,	-111,	-476,	-109,	-108,	-482,	-106,	-105,	
			
			-488,	-103,	-102,	-494,	-100,	-99,	-500,	-97,	
			-96,	-506,	-94,	-93,	-512,	-91,	-90,	-518,	
			-88,	-87,	-524,	-85,	-84,	-530,	-82,	-81,	
			-536,	-79,	-78,	-542,	-76,	-75,	-548,	-73,	
			-72,	-554,	-70,	-69,	-560,	-67,	-66,	-566,	
			-64,	-63,	-572,	-61,	-60,	-578,	-58,	-57,	
			-584,	-55,	-54,	-590,	-52,	-51,	-596,	-49,	
			-48,	-602,	-46,	-45,	-608,	-43,	-42,	-614,	
			
			-40,	-39,	-620,	-37,	-36,	-626,	-34,	-33,	
			-632,	-31,	-30,	-638,	-28,	-27,	-644,	-25,	
			-24,	-650,	-22,	-21,	-656,	-19,	-18,	-662,	
			-16,	-15,	-668,	-13,	-12,	-674,	-10,	-9,	
			-680,	-7,	-6,	-686,	-4,	-3,	-692,	-1,	
			0,	-698,	2,	3,	-704,	5,	6,	-710,	
			8,	9,	-716,	11,	12,	-722,	14,	15,	
			-728,	17,	18,	-734,	20,	21,	-740,	23,	
			
			24,	-746,	26,	27,	-752,	29,	30,	-758,	
			32,	33,	-764,	35,	36,	-770,	38,	39,	
			-776,	41,	42,	-782,	44,	45,	-788,	47,	
			48,	-794,	50,	51,	-800,	53,	54,	-806,	
			56,	57,	-812,	59,	60,	-818,	62,	63,	
			-824,	65,	66,	-830,	68,	69,	-836,	71,	
			72,	-842,	74,	75,	-848,	77,	78,	-854,	
			80,	81,	-860,	83,	84,	-866,	86,	87,	
			
			-872,	89,	90,	-878,	92,	93,	-884,	95,	
			96,	-890,	98,	99,	-896,	101,	102,	-902,	
			104,	105,	-908,	107,	108,	-914,	110,	111,	
			-920,	113,	114,	-926,	116,	117,	-932,	119,	
			120,	-938,	122,	123,	-944,	125,	126,	-950,	
			128,	129,	-956,	131,	132,	-962,	134,	135,	
			-968,	137,	138,	-974,	140,	141,	-980,	143,	
			144,	-986,	146,	147,	-992,	149,	150,	-998,	
			
			152,	153,	-1004,	155,	156,	-1010,	158,	159,	
			-1016,	161,	162,	-1022,	164,	165,	-1028,	167,	
			168,	-1034,	170,	171,	-1040,	173,	174,	-1046,	
			176,	177,	-1052,	179,	180,	-1058,	182,	183,	
			-1064,	185,	186,	-1070,	188,	189,	-1076,	191,	
			192,	-1082,	194,	195,	-1088,	197,	198,	-1094,	
			200,	201,	-1100,	203,	204,	-1106,	206,	207,	
			-1112,	209,	210,	-1118,	212,	213,	-1124,	215,	

			216,	-1130,	218,	219,	-1136,	221,	222,	-1142,	
			224,	225,	-1148,	227,	228,	-1154,	230,	231,	
			-1160,	233,	234,	-1166,	236,	237,	-1172,	239,	
			240,	-1178,	242,	243,	-1184,	245,	246,	-1190,	
			248,	249,	-1196,	251,	252,	-1202,	254,	255,	
			-1208,	257,	258,	-1214,	260,	261,	-1220,	263,	
			264,	-1226,	266,	267,	-1232,	269,	270,	-1238,				
			272,	273,	-1244,	275,	276,	-1250,	278,	279,	
			
			-1256,	281,	282,	-1262,	284,	285,	-1268,	287,	
			288,	-1274,	290,	291,	-1280,	293,	294,	-1286,	
			296,	297,	-1292,	299,	300,	-1298,	302,	303,	
			-1304,	305,	306,	-1310,	308,	309,	-1316,	311,	
			312,	-1322,	314,	315,	-1328,	317,	318,	-1334,	
			320,	321,	-1340,	323,	324,	-1346,	326,	327,	
			-1352,	329,	330,	-1358,	332,	333,	-1364,	335,	
			336,	-1370,	338,	339,	-1376,	341,	342,	-1382,	

			344,	345,	-1388,	347,	348,	-1394,	350,	351,	
			-1400,	353,	354,	-1406,	356,	357,	-1412,	359,	
			360,	-1418,	362,	363,	-1424,	365,	366,	-1430,	
			368,	369,	-1436,	371,	372,	-1442,	374,	375,	
			-1448,	377,	378,	-1454,	380,	381,	-1460,	383,	
			384,	-1466,	386,	387,	-1472,	389,	390,	-1478,	
			392,	393,	-1484,	395,	396,	-1490,	398,	399,	
			-1496,	401,	402,	-1502,	404,	405,	-1508,	407
		}, dct_io_tmp[SIZE], dct_o[SIZE];
		
		address i, j, i_1, i_plus_8, j_plus_64;
		
		int f0, f1, f2, f3,f4, f5, f6, f7;       // Spatial domain samples.       
		int g0, g1, h0, h1,p0, p1;               // Even-half intermediate.     
		int r0, r1;               // Even-half intermediate.     
		int P_0, P_1, R_0, R_1;       // Even-half intermediate.         
		int g2, g3, h2, h3;       // Odd-half intermediate.           
		int q0a,s0a,q0, q1,s0, s1;               // Odd-half intermediate.          
		int Q_0, Q_1, S_0, S_1;       // Odd-half intermediate.       
		int F_0, F_1, F_2, F_3, F_4, F_5, F_6, F_7;       // Freq. domain results. 
		//int F_0r,F_1r,F_2r,F_3r,F_4r,F_5r,F_6r,F_7r;      // Rounded, truncated results.  
		
	    int mf, xmf;
	    
	    address dct_io_tmp_address;
	    
	    address xi, xj;
		int xf0, xf1, xf2, xf3, xf4, xf5, xf6, xf7;
		int xg0, xh0, xp0, xr0;
		int xg1, xh1, xp1, xr1;
		int xP_0, xP_1, xR_0, xR_1;
		int xg2, xh2, xg3, xh3;
		int xq0a, xq0, xq1;
		int xs0a, xs0, xs1;
		int xQ_0, xQ_1, xS_0, xS_1;
		int xF_0, xF_1, xF_2, xF_3, xF_4, xF_5, xF_6, xF_7;
		int xF0r, xF1r, xF2r, xF3r, xF4r, xF5r, xF6r, xF7r;
	}
		
	counter (i=0; i<SIZE; i+=64@72);
	i.clk_en = init;

	i_plus_8 = i + 8;
	
	counter (j=i; j<i_plus_8; j++@9);
	j.clk_en = init & !i.done;
	j.load = i.step;

	j_plus_64 = j + 64;
	
	counter (i_1=j; i_1<j_plus_64; i_1+=8);
	i_1.clk_en = init@2;
	i_1.load = j.step;
	
	dct_io_ptr.address = i_1;
	
	f0 = dct_io_ptr.data_out when (j.step@4);
	f1 = dct_io_ptr.data_out when (j.step@5);
	f2 = dct_io_ptr.data_out when (j.step@6);
	f3 = dct_io_ptr.data_out when (j.step@7);
	f4 = dct_io_ptr.data_out when (j.step@8);
	f5 = dct_io_ptr.data_out when (j.step@9);
	f6 = dct_io_ptr.data_out when (j.step@10);
	f7 = dct_io_ptr.data_out when (j.step@11);
	
	g0 = f0 + f7;               
	h2 = f0 - f7;
	g1 = f1 + f6;               
	h3 = f1 - f6;
	h1 = f2 + f5;               
	g3 = f2 - f5;
	h0 = f3 + f4;               
	g2 = f3 - f4;

	p0 = g0 + h0;               
	r0 = g0 - h0;
	p1 = g1 + h1;               
	r1 = g1 - h1;
	q1 = g2;                    
	s1 = h2;
	s0a= h3 + g3;               
	q0a= h3 - g3;
	
	s0 = (s0a *@6 C0 + 0x7FFF) >> 16;					
	q0 = (q0a *@6 C0 + 0x7FFF) >> 16;
	
	R_1 = C6 *@6 r1 + C2 *@6 r0;     
	R_0 = C6 *@6 r0 - C2 *@6 r1;
	P_0 = p0 + p1;               
	P_1 = p0 - p1;
	Q_1 = q1 + q0;               
	Q_0 = q1 - q0;
	S_1 = s1 + s0;               
	S_0 = s1 - s0;           

	F_1 = C7 *@6 Q_1 + C1 *@6 S_1;   
	F_7 = C7 *@6 S_1 - C1 *@6 Q_1;
	F_5 = C3 *@6 Q_0 + C5 *@6 S_0;   
	F_3 = C3 *@6 S_0 - C5 *@6 Q_0;
	F_0 = P_0;                  
	F_4 = P_1;
	F_2 = R_1;                   
	F_6 = R_0;

	mf = F_0;
	mf = F_1 >> 13 when j.step@30;
	mf = F_2 >> 13 when j.step@31;
	mf = F_3 >> 13 when j.step@32;
	mf = F_4 when j.step@33;
	mf = F_5 >> 13 when j.step@34;
	mf = F_6 >> 13 when j.step@35;
	mf = F_7 >> 13 when j.step@36;

	dct_io_tmp_address = xi.step ? xi : (i_1@26) when init;

	dct_io_tmp.address = dct_io_tmp_address;

	dct_io_tmp.data_in = mf when (i_1.step@28) & (!i_1.done@27);
	
	counter (xi=0; xi<SIZE; xi++);
	xi.clk_en = i.done@28;
	
	counter (xj=0; xj<SIZE; xj+=8@8);
	xj.clk_en = i.done@28;
	
	xf0 = dct_io_tmp.data_out when xj.step@3;
	xf1 = dct_io_tmp.data_out when xj.step@4;
	xf2 = dct_io_tmp.data_out when xj.step@5;
	xf3 = dct_io_tmp.data_out when xj.step@6;
	xf4 = dct_io_tmp.data_out when xj.step@7;
	xf5 = dct_io_tmp.data_out when xj.step@8;
	xf6 = dct_io_tmp.data_out when xj.step@9;
	xf7 = dct_io_tmp.data_out when xj.step@10;
	
	xg0 = xf0 + xf7;               
	xh2 = xf0 - xf7;
	xg1 = xf1 + xf6;               
	xh3 = xf1 - xf6;
	xh1 = xf2 + xf5;               
	xg3 = xf2 - xf5;
	xh0 = xf3 + xf4;               
	xg2 = xf3 - xf4;

	xp0 = xg0 + xh0;               
	xr0 = xg0 - xh0;
	xp1 = xg1 + xh1;               
	xr1 = xg1 - xh1;
	xq1 = xg2;                     
	xs1 = xh2;
	xs0a= xh3 + xg3;               
	xq0a= xh3 - xg3;
	            
	xq0 = (xq0a *@6 C0 + 0x7FFF) >> 16;
	xs0 = (xs0a *@6 C0 + 0x7FFF) >> 16;
	
	xR_1 = C6 *@6 xr1 + C2 *@6 xr0;     
	xR_0 = C6 *@6 xr0 - C2 *@6 xr1;
	xP_0 = xp0 + xp1;               
	xP_1 = xp0 - xp1;
	xQ_1 = xq1 + xq0;               
	xQ_0 = xq1 - xq0;
	xS_1 = xs1 + xs0;               
	xS_0 = xs1 - xs0;
	
	xF_1 = C7 *@6 xQ_1 + C1 *@6 xS_1;    
	xF_7 = C7 *@6 xS_1 - C1 *@6 xQ_1;           
	xF_5 = C3 *@6 xQ_0 + C5 *@6 xS_0;    
	xF_3 = C3 *@6 xS_0 - C5 *@6 xQ_0;
	xF_0 = xP_0;                     
	xF_4 = xP_1;                          
	xF_2 = xR_1;                     
	xF_6 = xR_0;                          
	
	xF0r = (xF_0 + 0x0006) >>  3;
	xF1r = (xF_1 + 0x7FFF) >> 16;
	xF2r = (xF_2 + 0x7FFF) >> 16;
	xF3r = (xF_3 + 0x7FFF) >> 16;
	xF4r = (xF_4 + 0x0004) >>  3;
	xF5r = (xF_5 + 0x7FFF) >> 16;
	xF6r = (xF_6 + 0x7FFF) >> 16;
	xF7r = (xF_7 + 0x7FFF) >> 16;

	xmf = xF0r;
	xmf = xF1r when xj.step@30;
	xmf = xF2r when xj.step@31;
	xmf = xF3r when xj.step@32;
	xmf = xF4r when xj.step@33;
	xmf = xF5r when xj.step@34;
	xmf = xF6r when xj.step@35;
	xmf = xF7r when xj.step@36;

	dct_o.data_in = xmf when xi.step@29;
	dct_o.address = xi.output@29;
	output = dct_o.data_out;
	done = xi.done;
}
assert
{
	when output changes
	{
		check int output = 
		{-1856, -9, 0, -12, 1, -54, 4, 6, 
		0, 10, 0, 14, -1, 75, -2, -6, 
		-1, -14, -1, -19, 0, -90, 8, 10, 
		0, 13, 0, 18, 0, 99, -4, -8, 
		-6, -29, -10, -39, -16, -184, 36, 20, 
		38, 11, 62, 16, 113, 124, -165, -6, 
		-33, 18, -53, 25, -100, 105, 111, -13, 
		1, -9, 2, -12, 5, -65, -5, 6, 
		-1840, 15, 26, 20, 47, 105, -66, -10, 
		-23, 1, -38, 2, -70, 3, 89, -1, 
		26, 23, 42, 32, 77, 169, -109, -15, 
		-32, 3, -51, 3, -95, 7, 121, -2, 
		54, 41, 87, 56, 159, 295, -222, -27, 
		-121, 67, -196, 91, -365, 410, 460, -47, 
		-30, -73, -48, -100, -87, -520, 133, 48, 
		17, 1, 28, 2, 51, 13, -66, -1, 
		-1896, 6, -65, 8, -120, 30, 156, -4, 
		12, -29, 19, -39, 36, -195, -42, 19, 
		-65, 10, -105, 13, -194, 51, 254, -7, 
		15, -39, 25, -53, 47, -267, -54, 26, 
		-119, 23, -194, 31, -359, 130, 469, -17, 
		2, -195, 3, -267, 11, -1341, 20, 130, 
		156, 9, 254, 12, 469, 99, -613, -4, 
		-11, 19, -17, 26, -33, 130, 40, -13, 
		-1832, -44, 39, -60, 73, -296, -90, 29, 
		35, 27, 57, 37, 105, 193, -139, -18, 
		39, -71, 63, -97, 117, -481, -144, 48, 
		48, 36, 78, 50, 144, 260, -192, -24, 
		66, -134, 107, -183, 200, -907, -247, 90, 
		279, 129, 454, 176, 837, 931, -1109, -84, 
		-127, 155, -205, 213, -382, 1050, 480, -105, 
		-22, -20, -36, -28, -65, -144, 87, 13, 
		-1816, 50, 65, 68, 119, 346, -160, -33, 
		-59, 19, -95, 25, -175, 120, 226, -13, 
		65, 80, 106, 110, 194, 560, -262, -53, 
		-79, 26, -129, 35, -239, 168, 309, -18, 
		126, 146, 204, 200, 375, 1018, -505, -97, 
		-362, 184, -588, 251, -1088, 1217, 1406, -125, 
		-124, -210, -201, -288, -369, -1465, 502, 140, 
		40, -10, 66, -14, 122, -65, -157, 7, 
		-1944, 6, -143, 8, -264, 30, 344, -4, 
		12, -63, 19, -86, 36, -430, -42, 42, 
		-143, 10, -232, 13, -428, 51, 559, -7, 
		15, -85, 25, -117, 47, -588, -54, 57, 
		-263, 23, -428, 31, -791, 130, 1033, -17, 
		2, -430, 4, -588, 11, -2956, 20, 288, 
		344, 9, 559, 12, 1034, 99, -1350, -4, 
		-11, 42, -18, 57, -33, 287, 40, -28, 
		-1808, -79, 78, -108, 145, -537, -184, 53, 
		70, 44, 114, 60, 210, 310, -277, -29, 
		77, -128, 126, -175, 234, -873, -297, 86, 
		96, 60, 156, 82, 288, 420, -380, -40, 
		138, -239, 224, -327, 416, -1630, -529, 160, 
		521, 246, 845, 337, 1560, 1739, -2055, -162, 
		-221, 293, -358, 400, -664, 1995, 848, -197, 
		-45, -32, -73, -43, -136, -222, 179, 21, 
		-1792, 85, 104, 116, 191, 587, -254, -56, 
		-93, 35, -151, 48, -280, 237, 364, -24, 
		104, 137, 169, 188, 311, 952, -415, -91, 
		-128, 49, -207, 67, -382, 328, 496, -33, 
		198, 251, 321, 344, 591, 1741, -787, -167, 
		-603, 302, -979, 412, -1811, 2024, 2350, -203, 
		-218, -348, -354, -476, -651, -2409, 871, 232, 
		64, -22, 104, -29, 192, -143, -249, 15, 
		-1992, 6, -221, 8, -408, 30, 533, -4, 
		12, -96, 19, -132, 36, -665, -42, 64, 
		-221, 10, -358, 13, -662, 51, 864, -7, 
		15, -132, 25, -181, 47, -909, -54, 88, 
		-407, 23, -662, 31, -1223, 130, 1598, -17, 
		1, -665, 3, -909, 11, -4570, 19, 444, 
		532, 9, 865, 12, 1598, 99, -2087, -4, 
		-11, 65, -18, 88, -33, 444, 40, -43, 
		-1784, -114, 117, -156, 217, -778, -278, 76, 
		105, 61, 171, 84, 315, 428, -414, -41, 
		116, -185, 189, -253, 351, -1264, -450, 124, 
		144, 83, 234, 114, 432, 581, -568, -55, 
		210, -345, 341, -471, 632, -2353, -811, 231, 
		761, 363, 1237, 497, 2283, 2546, -3000, -241, 
		-315, 430, -511, 589, -946, 2940, 1217, -288, 
		-69, -43, -112, -59, -206, -301, 271, 28};
	}
} 